// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String?
  role        String   @default("USER")
  addresses   Address[]
  cpf         String   @unique
  password    String
  phone       String
  order Order[]
  @@map("user")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  quantity    Int      @default(0)
  unavailable Boolean  @default(false)
  deletedAt   DateTime? 
  photoUrl    String?
  orderHasProduct OrderHasProduct[]
  productHasCategory ProductHasCategory[]
  @@map("product")
}

model Address {
  id          Int      @id @default(autoincrement())
  name        String
  cep         String
  state       String
  city        String
  street      String
  number      String
  complement  String?
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
 @@map("address")
}

model OrderHasProduct {
  id          Int      @id @default(autoincrement())
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id])
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  @@map("order_has_product")
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  total       Float
  createdAt   DateTime @default(now())
  orderHasProduct OrderHasProduct[]
  @@map("order")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  productHasCategory    ProductHasCategory[]
  @@map("category")
}

model ProductHasCategory {
  id         Int       @id @default(autoincrement())
  productId  Int
  product    Product   @relation(fields: [productId], references: [id])
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id])
  @@map("productHasCategory")
}